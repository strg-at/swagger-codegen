<?php

{{#operations}}/**
 * {{controllerName}}
 * PHP version 5
 *
 * @category Class
 * @package  {{controllerPackage}}
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

{{>partial_header}}
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace {{controllerPackage}};

use \Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use {{apiPackage}}\{{classname}};
use Psr\Log\LoggerInterface;
{{#imports}}use {{import}};
{{/imports}}

/**
 * {{controllerName}} Class Doc Comment
 *
 * @category Class
 * @package  {{controllerPackage}}
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class {{controllerName}} extends Controller
{
    {{#operation}}

    /**
     * Operation {{{operationId}}}
{{#summary}}
     *
     * {{{summary}}}
{{/summary}}
     *
{{#description}}
     * {{.}}
     *
{{/description}}
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function {{operationId}}Action(Request $request{{#hasPathParams}}{{#pathParams}}, ${{paramName}}{{/pathParams}}{{/hasPathParams}})
    {
        $this->logger->info($request, ['operation' => '{{controllerName}}::{{operationId}}']);
        // get the handler for the api first, we need it throughout the whole function
        $handler = $this->getApiHandler();

        // know response codes, models and messages
        $responses = [
            {{#responses}}

            {{code}} => [
                'message' => '{{message}}',
                'responseType' => '{{dataType}}',
            ],{{/responses}}
        ];

        // set response and format to null, we need the variable even when not set
        $response = null;
        $responseFormat = null;
        try {
            {{#bodyParams}}
            // Make sure that the client is providing something that we can consume
            $consumes = [
                {{#consumes}}
                '{{{mediaType}}}',
                {{/consumes}}
            ];

            $inputFormat = $request->headers->has('Content-Type') ? $request->headers->get('Content-Type') : $consumes[0];
            if (!in_array($inputFormat, $consumes)) {
                // We can't consume the content that the client is sending us
                throw new RequestFormatNotSupportedException();
            }

            {{/bodyParams}}

            // Figure out what data format to return to the client
            $produces = [{{#produces}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/produces}}];
            // Figure out what the client accepts
            $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
            $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
            if ($responseFormat === null) {
                throw new ResponseFormatNotSupportedException();
            }

            // Handle authentication
            {{#authMethods}}
            // Authentication '{{name}}' required
            {{#isApiKey}}
            {{#isKeyInHeader}}
            // Set key with prefix in header
            $security{{name}} = $request->headers->get('{{keyParamName}}');
            {{/isKeyInHeader}}
            {{#isKeyInQuery}}
            // Set key with prefix in query string
            $security{{name}} = $request->query->get('{{keyParamName}}');
            {{/isKeyInQuery}}
            {{/isApiKey}}
            {{#isBasic}}
            // HTTP basic authentication required
            $security{{name}} = $request->headers->get('authorization');
            {{/isBasic}}
            {{#isOAuth}}
            // Oauth required
            $security{{name}} = $request->headers->get('authorization');
            {{/isOAuth}}
            {{/authMethods}}

            // Read out all input parameter values into variables
            {{#queryParams}}
            ${{paramName}} = $request->query->get('{{baseName}}'{{#defaultValue}}, '{{defaultValue}}'{{/defaultValue}});
            {{/queryParams}}
            {{#headerParams}}
            ${{paramName}} = $request->headers->get('{{baseName}}'{{#defaultValue}}, '{{defaultValue}}'{{/defaultValue}});
            {{/headerParams}}
            {{#formParams}}
            {{#isFile}}
            ${{paramName}} = $request->files->get('{{baseName}}');
            {{/isFile}}
            {{^isFile}}
            ${{paramName}} = $request->request->get('{{baseName}}'{{#defaultValue}}, '{{defaultValue}}'{{/defaultValue}});
            {{/isFile}}
            {{/formParams}}
            {{#bodyParams}}
            ${{paramName}} = $request->getContent();
            {{/bodyParams}}

            // Deserialize the input values that needs it
            {{#allParams}}
            {{^isFile}}
            {{#isBodyParam}}
            ${{paramName}} = $this->deserialize(${{paramName}}, '{{#isContainer}}{{#items}}array<{{datatype}}>{{/items}}{{/isContainer}}{{^isContainer}}{{dataType}}{{/isContainer}}', $inputFormat);
            {{/isBodyParam}}
            {{^isBodyParam}}
            ${{paramName}} = $this->deserialize(${{paramName}}, '{{#isContainer}}array<{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}{{^collectionFormat}}csv{{/collectionFormat}},{{dataType}}>{{/isContainer}}{{^isContainer}}{{dataType}}{{/isContainer}}', 'string');
            {{/isBodyParam}}
            {{/isFile}}
            {{/allParams}}

            // Validate the input values
            {{>api_input_validation}}

            {{#authMethods}}
            // Set authentication method '{{name}}'
            $handler->set{{name}}($security{{name}});
            {{/authMethods}}
            
            // Make the call to the business logic
            $responseCode = {{#returnType}}200{{/returnType}}{{^returnType}}204{{/returnType}};
            $responseHeaders = [];
            $response = $handler->{{operationId}}({{#allParams}}${{paramName}}, {{/allParams}}$responseCode, $responseHeaders);

            // Set appropiate response type and message
            $responseType = $responses[$responseCode]['responseType'];

            // Assert that the output from business logic corresponds to response model
            $asserts = [];
            $asserts[] = new Assert\Type($responseType);
            $errors = $this->validator->validate($response, $asserts);
            if (count($errors) > 0) {
                throw new ResponseNotValidException('Unexpected Error', 0, null, $errors);
            }
        } catch (ParametersNotValidException $exception) {
            $responseCode = 400;
            $responseHeaders = [];
            $response = $handler->createErrorResponse(400, $exception->getValidationErrors(), '{{operationId}}');
        } catch (ResponseFormatNotSupportedException $exception) {
            $responseCode = 406;
            $responseHeaders = [];
            $response = $handler->createErrorResponse(406, [$exception->getMessage()], '{{operationId}}');
        } catch (RequestFormatNotSupportedException $exception) {
            $responseCode = 415;
            $responseHeaders = [];
            $response = $handler->createErrorResponse(415, [$exception->getMessage()], '{{operationId}}');
        } catch (ResponseNotValidException $exception) {
            $this->logger->error($exception, ['operation' => '{{controllerName}}::{{operationId}}']);
            $responseCode = 500;
            $responseHeaders = [];
            $response = $handler->createErrorResponse(500, $exception->getValidationErrors(), '{{operationId}}');
        } catch (Exception $exception) {
            $this->logger->error($exception, ['operation' => '{{controllerName}}::{{operationId}}']);
            $responseCode = 500;
            $responseHeaders = [];
            $response = $handler->createErrorResponse(500, [$exception->getMessage()], '{{operationId}}');
        }
        if ($responseFormat === null) {
            $responseFormat = reset($produces);
        }
        $message = isset($responses[$responseCode]['message']) ? $responses[$responseCode]['message'] : '';
        if ($response !== null) {
            $responseObject = new Response(
                $response ? $this->serialize($response, $responseFormat) : '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-Swagger-Message' => $message,
                    ]
                )
            );
            $this->logger->info($responseObject, ['operation' => '{{controllerName}}::{{operationId}}']);
            return $responseObject;
        }
    }
    {{/operation}}

    /**
     * Returns the handler for this API controller.
     * @return {{classname}}
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('{{pathPrefix}}');
    }
}
{{/operations}}
